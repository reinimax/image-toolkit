{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IMAGE TOOLKIT","text":""},{"location":"#video-demo","title":"Video Demo:","text":""},{"location":"#description","title":"Description:","text":"<p>Image toolkit  is a service for basic image manipulation. It features a website where the user can upload an image for processing, as well as an API, powered by Flask.</p>"},{"location":"#links","title":"Links","text":"<ul> <li>Documentation is hosted on Github</li> <li>Backend hosting tbd</li> <li>Frendend hosting tbd</li> </ul>"},{"location":"#installation","title":"Installation","text":"<ol> <li>Set up virtual environment: <code>python3 -m venv .venv</code></li> <li>Activate virtual environment: <code>. .venv/bin/activate</code></li> <li>Install dependencies: <code>python -m pip install -r requirements.txt</code></li> </ol> <p>Note: You can exit the virtual environment by typing <code>deactivate</code>. Learn more about virtual environments and package installation.</p>"},{"location":"#run-the-service-locally","title":"Run the service locally","text":"<p>Activate the virtual environment and type <code>flask run</code>.</p>"},{"location":"#self-host-the-service","title":"(Self-) Host the service","text":"<p>tbd. Refer to Flask's documentation for deploying to production.</p>"},{"location":"#usage","title":"Usage","text":""},{"location":"#via-the-web-interface-upload-form","title":"via the web-interface (upload form) <p>tbd</p>","text":""},{"location":"#via-the-api","title":"via the API <p>There is one API endpoint, <code>/image-process</code>, which expects a <code>POST</code> request with a <code>JSON</code> payload.</p> <p>Except the obligatory <code>Content-Type: application/json</code>, no additional headers and no authentication are required.</p> <p>The <code>JSON</code> payload has two mandatory fields:</p> <ul> <li><code>original_image</code>: base64-encoded image.</li> <li><code>operations</code>: array of objects that define the operations to be performed on the image. Operations will be performed in order. If an invalid operation is given, or a valid operation fails, the other operations will still be performed.</li> </ul> <p>An <code>operation</code> object itself consists of a mandatory <code>name</code> field which specifies the operation that should be performed. The name is the same as the name of the processing function that will be called to do the work.</p> <p>Optionally, each operation accepts arguments that specify how the image should be processed, e.g. a width and/or height for resizing an image. Dimensions like width or height can be given to the API in different ways: Generally, it will accept units of pixels and percent. If the unit is pixels, it can be omitted, since this is assumed as the standard. These would all be valid arguments:</p> <pre><code>\"width\": \"300px\"\n\"width\": \"300\" // 300px, as above\n\"width\": 300\n\"width\": 300.0 // this works too, but is considered bad practice\n\"width\": \"50%\" // 50 percent\n</code></pre> <p>A complete payload might look like this:</p> <pre><code>{\n    \"operations\": [\n        {\n            \"name\": \"rotate\",\n            \"degrees\": 180\n        },\n        {\n            \"name\": \"resize\",\n            \"width\": \"50%\",\n        },\n        // ... any other operations you like to perform.\n    ],\n    \"original_image\": \"...\" // base64-encoded image\n}\n</code></pre>","text":""},{"location":"#api-response","title":"API response","text":"<p>A successful response from the API will look like this:</p> <pre><code>{\n    \"metadata\": {\n        \"format\": \"jpeg\", // format of the processed image\n        // width and height of the processed image\n        \"height\": 374,\n        \"width\": 300\n    },\n    \"processed_image\": \"...\" // base64-encoded image\n}\n</code></pre> <p>If you get back the original image, or some operations were not performed, this probably means you provided invalid/incomplete parameters to some operation(s). If you found a bug, feel free to open an issue.</p> <p>If you really messed up the <code>JSON</code> payload or did not provide a correctly encoded image, you will get an error response instead:</p> <pre><code>{\n    \"error\": \"No image provided.\" // The error message will try to explain what caused the error.\n}\n</code></pre> <p>However, I tried to design this API pretty robust and forgiving, so (hopefully) what you'll see more often is just some operation not being performed if you forgot an argument or mistyped something.</p> <p>You can look up the available processing functions and the arguments they expect in the API documentation (ignore the <code>image</code> argument, as this will be passed in automatically).</p>"},{"location":"#accepted-file-formats","title":"Accepted file formats","text":"<p>tbd (refer to the pillow documentation)</p>"},{"location":"#a-short-tour-of-the-repo","title":"A short tour of the repo","text":"<p>This repository consists of 4 main parts:</p>"},{"location":"#the-backendapi","title":"The backend/API","text":"<p>This is a flask application, consisting of 4 files:</p> <ul> <li><code>app.py</code>defines the routing and interface of the API.</li> <li><code>operations.py</code> defines the available image manipulation operations.</li> <li><code>helpers.py</code> defines some helper functions.</li> <li><code>requirements.txt</code> defines the libraries used by the application.</li> </ul>"},{"location":"#the-frontend","title":"The frontend","text":"<p>tbd</p>"},{"location":"#the-documentation","title":"The documentation","text":"<p>The documentation is automatically generated from the README file and the docstrings from the source code of the API. It is located in the <code>docs</code> directory.</p>"},{"location":"#tooling-for-the-documentation","title":"Tooling for the documentation:","text":"<p>There are a number of files dedicated to auto-generating documentation and integrating pdoc with mkdocs:</p> <ul> <li><code>mkdocs.yml</code> is the configuration file for creating a static site containing the documentation.</li> <li><code>make.py</code> is a script that generates <code>pdoc</code> documentation and moves it to a directory and format where it can be picked off by <code>mkdocs</code>.</li> <li>The <code>pdoc-template</code> folder contains a template override and styling for <code>pdoc</code>, so that it better integrates with the generated <code>mkdocs</code>.</li> <li>The <code>mk-docs</code>folder contains an <code>index.md</code> file that links the README into the generated documentation and <code>custom.js</code> that does some cosmetic changes to better integrate the documentation generated by <code>pdoc</code>.</li> </ul>"},{"location":"#design-decisions","title":"Design decisions","text":"<ul> <li>I decided to create just one API-endpoint and make the user provide the wanted operations as JSON payload. This is more user-friendly, because it lets you chain operations together in one single request.</li> <li>I tried out autogenerating API documentation using flaskapi and the OpenAPI spec, which is awesome in principle, but didn't convince me in the context of this project. There is only one API endpoint, which takes a lot of parameters. OpenAPI is great if you have a lot of small endpoints and methods, but that's not the case here. What I really needed was to document the single image manipulation operations. At the end, I decided to use pdoc, an easy to use library that generates pretty neat documentation and integrate it with mkdocs, linking this README file to the generated documentations index file using pymdown-extensions.</li> <li>In a similar vein, I looked into APIflask which has some neat features. But in the end I decided to stick with vanilla Flask and making some adoptions manually (e.g. making sure error responses are always sent as JSON instead of text/html). The reason is, I wanted to keep things simple and avoid the application being overloaded with features that I don't really use, especially since I decided against going with the OpenAPI approach.</li> </ul>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<ul> <li>Huge thanks to HuggingChat for providing suggestions and feeback regarding some initial design decisions (link to the chat) and for help with debugging some stuff.</li> <li>This project would not have been possible without some amazing libraries. See below for a list of projects this project relies on.</li> </ul>"},{"location":"#powerd-by","title":"Powerd by","text":"<p>tbd list used libraries</p>"},{"location":"api/","title":"Index","text":""},{"location":"api/operations/","title":"Processing functions","text":"operations API documentation API Documentation <ul> <li> resize </li> <li> rotate </li> </ul>              built with pdoc  operations     <p>This file defines image manipulation operations that are callable via the API. New functions added here will be automatically picked up when the function is  added to the <code>ALLOWED_OPERATIONS</code> dictionary.</p> <p>Function arguments will be automatically passed when the function is called,  if they were given via the API. The keys provided in the <code>operations</code> object  must match the parameter names of the Python function. For example, giving  this JSON to the API</p> <pre><code>\"operations\": [\n    {\n        \"name\": \"resize\",\n        \"width\": \"300px\"\n    }\n]\n</code></pre> <p>would result in this function call: <code>resize(image, width=\"300px\")</code>.</p> <p>Note that every image manipulation function must take an object of class  PIL.Image.Image as its first parameter, which will always be automatically  passed to the function.</p> View Source <pre>  1\"\"\"\n  2This file defines image manipulation operations that are callable via the API.\n  3New functions added here will be automatically picked up when the function is \n  4added to the `ALLOWED_OPERATIONS` dictionary.\n  5\n  6Function arguments will be automatically passed when the function is called, \n  7if they were given via the API. The keys provided in the `operations` object \n  8must match the parameter names of the Python function. For example, giving \n  9this JSON to the API\n 10```\n 11\"operations\": [\n 12    {\n 13        \"name\": \"resize\",\n 14        \"width\": \"300px\"\n 15    }\n 16]\n 17```\n 18would result in this function call: `resize(image, width=\"300px\")`.\n 19\n 20Note that every image manipulation function must take an object of class \n 21PIL.Image.Image as its first parameter, which will always be automatically \n 22passed to the function.\n 23\"\"\"\n 24\n 25from PIL import Image\n 26from helpers import Unit, parse_dimension\n 27\n 28def resize(image:Image.Image, width:str=None, height:str=None):\n 29    \"\"\"#Resize the image to the provided dimensions\n 30    \n 31    **Parameters:**\n 32    - image (Image): PIL image object\n 33    - width (str): Width to which the image should be resized\n 34    - height (str): Height to which the image should be resized\n 35\n 36    **Description:**  \n 37    If both width and height are given, the image will be resized \n 38    regardless of aspect ratio.  \n 39    If either width or height are given, the image will be scaled to \n 40    that dimension and aspect ratio will be maintained.  \n 41    If the given dimension(s) are bigger tham the original image, or \n 42    neither width nor heigth are provided, the original image will be \n 43    returned without resizing.\n 44\n 45    **Returns**:\n 46    PIL Image object\n 47    \"\"\"\n 48    # If no dimensions were provided, return the original image.\n 49    if not width and not height:\n 50        return image\n 51    \n 52    # Get original image dimensions\n 53    orig_w, orig_h = image.size\n 54\n 55    if width:\n 56        width, unit = parse_dimension(width)\n 57        if unit == Unit.PERCENT:\n 58            width = int(orig_w * width / 100)\n 59\n 60    if height:\n 61        height, unit = parse_dimension(height)\n 62        if unit == Unit.PERCENT:\n 63            height = int(orig_h * height / 100)\n 64\n 65    # Scale the dimension that was not provided\n 66    if not height:\n 67        # Calculate by how much the image scales down\n 68        scale = width / orig_w\n 69        # Scale the height accordingly\n 70        height = int(orig_h * scale)\n 71    elif not width:\n 72        scale = height / orig_h\n 73        width = int(orig_w * scale)\n 74\n 75    # Make sure the given dimensions are greater than 0 and don't exceed the original image.\n 76    if width &lt;= 0 or height &lt;= 0 or width &gt; orig_w or height &gt; orig_h:\n 77        return image\n 78    \n 79    return image.resize((width, height))\n 80\n 81\n 82def rotate(image:Image.Image, degrees, expand:bool=True, clockwise:bool=False):\n 83    \"\"\"#Rotate the image by the provided degrees\n 84    \n 85    **Parameters:**\n 86    - image (Image): PIL image object\n 87    - degrees (int|float|str): Amount of degrees by which to rotate the image\n 88    - expand (bool): Whether the image dimensions should expand so that the \n 89    resulting image contains all of the original image. If set to False, the \n 90    image will remain the same size and parts that would be \"outside\" the image \n 91    due to roation will be cut. For rotating by 90 and 270 degrees, leave this \n 92    setting set to True, since this will allow width and height of the image to \n 93    switch without producing a border\n 94    - clockwise (bool): Set to True for clockwise rotation. Per default, rotation \n 95    is counter-clockwise\n 96\n 97    **Description:**  \n 98    Rotate the image counter-clockwise by the provided degrees.\n 99\n100    **Returns**:\n101    PIL Image object\n102    \"\"\"\n103    # If we get a string, try to convert to float\n104    if isinstance(degrees, str):\n105        try:\n106            degrees = float(degrees)\n107        except:\n108            return image\n109    # Invert degrees if we rotate clockwise.\n110    degrees = -degrees if clockwise else degrees\n111    return image.rotate(degrees, expand=expand)\n112\n113\n114ALLOWED_OPERATIONS = {\n115    \"resize\": resize,\n116    \"rotate\": rotate\n117}\n118\"\"\"@private\"\"\"\n</pre> def resize(image: PIL.Image.Image, width: str = None, height: str = None): View Source <pre>29def resize(image:Image.Image, width:str=None, height:str=None):\n30    \"\"\"#Resize the image to the provided dimensions\n31    \n32    **Parameters:**\n33    - image (Image): PIL image object\n34    - width (str): Width to which the image should be resized\n35    - height (str): Height to which the image should be resized\n36\n37    **Description:**  \n38    If both width and height are given, the image will be resized \n39    regardless of aspect ratio.  \n40    If either width or height are given, the image will be scaled to \n41    that dimension and aspect ratio will be maintained.  \n42    If the given dimension(s) are bigger tham the original image, or \n43    neither width nor heigth are provided, the original image will be \n44    returned without resizing.\n45\n46    **Returns**:\n47    PIL Image object\n48    \"\"\"\n49    # If no dimensions were provided, return the original image.\n50    if not width and not height:\n51        return image\n52    \n53    # Get original image dimensions\n54    orig_w, orig_h = image.size\n55\n56    if width:\n57        width, unit = parse_dimension(width)\n58        if unit == Unit.PERCENT:\n59            width = int(orig_w * width / 100)\n60\n61    if height:\n62        height, unit = parse_dimension(height)\n63        if unit == Unit.PERCENT:\n64            height = int(orig_h * height / 100)\n65\n66    # Scale the dimension that was not provided\n67    if not height:\n68        # Calculate by how much the image scales down\n69        scale = width / orig_w\n70        # Scale the height accordingly\n71        height = int(orig_h * scale)\n72    elif not width:\n73        scale = height / orig_h\n74        width = int(orig_w * scale)\n75\n76    # Make sure the given dimensions are greater than 0 and don't exceed the original image.\n77    if width &lt;= 0 or height &lt;= 0 or width &gt; orig_w or height &gt; orig_h:\n78        return image\n79    \n80    return image.resize((width, height))\n</pre> def rotate( image: PIL.Image.Image, degrees, expand: bool = True, clockwise: bool = False): View Source <pre> 83def rotate(image:Image.Image, degrees, expand:bool=True, clockwise:bool=False):\n 84    \"\"\"#Rotate the image by the provided degrees\n 85    \n 86    **Parameters:**\n 87    - image (Image): PIL image object\n 88    - degrees (int|float|str): Amount of degrees by which to rotate the image\n 89    - expand (bool): Whether the image dimensions should expand so that the \n 90    resulting image contains all of the original image. If set to False, the \n 91    image will remain the same size and parts that would be \"outside\" the image \n 92    due to roation will be cut. For rotating by 90 and 270 degrees, leave this \n 93    setting set to True, since this will allow width and height of the image to \n 94    switch without producing a border\n 95    - clockwise (bool): Set to True for clockwise rotation. Per default, rotation \n 96    is counter-clockwise\n 97\n 98    **Description:**  \n 99    Rotate the image counter-clockwise by the provided degrees.\n100\n101    **Returns**:\n102    PIL Image object\n103    \"\"\"\n104    # If we get a string, try to convert to float\n105    if isinstance(degrees, str):\n106        try:\n107            degrees = float(degrees)\n108        except:\n109            return image\n110    # Invert degrees if we rotate clockwise.\n111    degrees = -degrees if clockwise else degrees\n112    return image.rotate(degrees, expand=expand)\n</pre>"},{"location":"api/operations/#resize-the-image-to-the-provided-dimensions","title":"Resize the image to the provided dimensions","text":"<p>Parameters:</p> <ul> <li>image (Image): PIL image object</li> <li>width (str): Width to which the image should be resized</li> <li>height (str): Height to which the image should be resized</li> </ul> <p>Description:  If both width and height are given, the image will be resized  regardless of aspect ratio.  If either width or height are given, the image will be scaled to  that dimension and aspect ratio will be maintained.  If the given dimension(s) are bigger tham the original image, or  neither width nor heigth are provided, the original image will be  returned without resizing.</p> <p>Returns: PIL Image object</p>"},{"location":"api/operations/#rotate-the-image-by-the-provided-degrees","title":"Rotate the image by the provided degrees","text":"<p>Parameters:</p> <ul> <li>image (Image): PIL image object</li> <li>degrees (int|float|str): Amount of degrees by which to rotate the image</li> <li>expand (bool): Whether the image dimensions should expand so that the  resulting image contains all of the original image. If set to False, the  image will remain the same size and parts that would be \"outside\" the image  due to roation will be cut. For rotating by 90 and 270 degrees, leave this  setting set to True, since this will allow width and height of the image to  switch without producing a border</li> <li>clockwise (bool): Set to True for clockwise rotation. Per default, rotation  is counter-clockwise</li> </ul> <p>Description:  Rotate the image counter-clockwise by the provided degrees.</p> <p>Returns: PIL Image object</p>"}]}